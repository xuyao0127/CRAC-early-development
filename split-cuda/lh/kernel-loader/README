                      KERNEL LOADER
                  VERSION 11: June, 2024

 ********************************************************************
 *                Copyright (c) Gene Cooperman, 2023-2024           *
 *                gene@ccs.neu.edu                                  *
 * This code may be freely copied and modified as long as the above *
 * copyright notice is included.  Any derivative work must contain  *
 * a readable copy of this copyright notice.                        *
 ********************************************************************

USAGE: kernel-loader [-a LOAD_ADDRESS] a.out ...
NOTE: load_address should typically be a multiple of 0x200000 for ld.so

DESCRIPTION:
  The program 'a.out ...' is loaded starting at <LOAD_ADDRESS>.
  The runtime linker-loader (ld.so) is loaded at <LOAD_ADDRESS>+0x400000.
  (Edit kernel-loader.c to change 0x400000.)

  To build this, run 'make kernel-loader', 'make gdb' or 'make check' (default).
  'make check' executes:
    ./kernel-loader -a 0x800000 /bin/ls

  By default, this builds with DEBUG printing.  To change this, remove
  '-DDEBUG' from 'CFLAGS' in 'Makefile'.

NOTES:

kernel-loader inspects a.out to find ld.so, and it then loads ld.so
into memory.  If can be the basis of implementing a "split process"
(cf. "MANA for MPI: MPI-Agnostic Network-Agnostic Transparent Checkpointing"
by Garg et al.), although that work originally used a copy-the-bits
technique instead.  This is called "Kernel Loader", because it imitates
what the Linux kernel does to load "a.out".  However, since we explicitly
call "ld.so", we are able here to patch "ld.so" to use our own mmap wrapper,
and force "a.out" to be loaded at our preferred address.

I tried to keep the code logic easy to read and short:  about 800 lines of code

This code ws developed, while exchanging code back and forth with
Rohan Garg, to get the best of both designs.  This code (Version 9)
also uses the .gnu_debugLink section to find the path to a debug file
with a separate symbol table (needed for the Debian/Ubuntu distros).
Try:
  gcc -DSTANDALONE get-symbol-offset.c && ./a.out
to test the core low-level logic.

TODO:
* kernel-loader.c can easily be turned into a PIE file, so that it
    can relocate itself.  I don't believe it uses a data segment,
    except for read-only strings, which can be fixed.
* See the FIXME comments in kernel-loader.c for minor issues.
* The mmap_wrapper function should also patch the target executable.
    When ld.so is patched to use mmap_wrapper(), mmap_wrapper() should
    use its control to discover when ld.so is loading the target
    executable, and then patch the mmap() of the target executable.
    This must be done before the target executable executes main(),
    since it might call its own mmap() at any time, and we need
    to control where it allocates memory from the kernel via mmap. 
* Similarly, the target executable needs to patch sbrk() with sbrk_wrapper(),
    before it chooses to allocate memory from the kernel..
* Currently, 'kernel-loader -a XXX ...' maps the kernel loader to an
    address near XXX.  The target executable (/bin/ls in this Makefile)
    is not loaded to a special address.  To relocate the target executable,
    we must:
  + compile the executable as a PIE file; and
  + interpose on mmap() in ld.so in this code, and so it's easy to insert
    a wrapper function (see patch-trampoline.c and its use in kernel-loader.c).
